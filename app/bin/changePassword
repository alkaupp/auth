#!/usr/bin/env php
<?php
declare(strict_types=1);

use Auth\Application\ApplicationFactory;
use Auth\AuthenticationException;
use Auth\Repository\NotFoundException;
use Auth\Repository\UserRepository;
use Auth\Service\PasswordChange;
use DI\ContainerBuilder;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

require __DIR__ . '/../vendor/autoload.php';

final class ChangePasswordCommand extends Command
{
    /** @var UserRepository */
    private $userRepository;

    public function __construct(UserRepository $userRepository)
    {
        $this->userRepository = $userRepository;
        parent::__construct('change-password');
    }

    protected function configure()
    {
        $this->addArgument('username', InputArgument::REQUIRED);
        $this->addArgument('old-password', InputArgument::REQUIRED);
        $this->addArgument('new-password', InputArgument::REQUIRED);
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $passwordChange = new PasswordChange($this->userRepository);
        try {
            $passwordChange(
                $input->getArgument('username'),
                $input->getArgument('old-password'),
                $input->getArgument('new-password')
            );
            $output->writeln('<info>Password changed successfully</info>');
        } catch (NotFoundException $exception) {
            $output->writeln(sprintf('<error>%s</error>', $exception->getMessage()));
        } catch (AuthenticationException $exception) {
            $output->writeln(sprintf('<error>%s</error>', $exception->getMessage()));
        }
    }
}

$containerBuilder = new ContainerBuilder();
$containerBuilder->addDefinitions(__DIR__ . '/../config/dependency-injection.php');
$container = $containerBuilder->build();
$app = (new ApplicationFactory($container))->createConsoleApplication();
$app->run(new ChangePasswordCommand($container->get(UserRepository::class)));
